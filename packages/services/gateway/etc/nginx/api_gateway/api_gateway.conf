###########################
# GLOBAL DDoS MITIGATIONS #
###########################
# RATE LIMITING OF REQUESTS (1 req/sec for each IP & 20 req/sec for each auth client)
limit_req_zone $binary_remote_addr zone=ip_addr_1rs:1m rate=1r/s;
limit_req_zone $http_apikey        zone=auth_20rs:1m   rate=20r/s;
# LIMITING THE NUMBER OF CONNECTIONS
limit_conn_zone $binary_remote_addr zone=ip_addr:10m; #(~80k keys)
# DROP LONG LIVED CONNECTIONS (default is 60 sec)
client_body_timeout 5s;
client_header_timeout 5s;
# RANGE-BASED ATTACKS
proxy_set_header Range "";
# HIDE NGINX VERSION
server_tokens off;
# ALLOWLISTING BY IP/Referer/User-Agent/GeoIP
# IP Addresses
# deny 123.123.123.3;
# deny 123.123.123.0/28; # range
# allow 192.168.1.0/24; # range
# deny all; # all, e.g block all requests to a specific URL that seems to be targeted
# User-Agent header(not correspond to normal client traffic)
# if ($http_user_agent ~* foo|bar) {
#     return 403;
# }

##################
# GLOBAL CACHING #
##################
# Cache SSL session params to avoid SSL handshakes for parallel and subsequent connections
ssl_session_cache   shared:SSL:10m; #(~40k sessions)
ssl_session_timeout 10m;




################
# API GATEAWAY #
################
server {
    listen 443 ssl;
    server_name localhost #api.example.com;
    keepalive_timeout 70;

    ############
    # Services #
    ############
    include services.conf;

    ###################
    # Session mocking #
    ###################
    include mock_session.conf;

    ###########
    # Logging #
    ###########
    access_log /var/log/nginx/api_access.log main;

    ####################
    # DDoS mitigations #
    ####################
    # Use rate limiting (+ 429 instead of 503 by default)
    limit_req zone=ip_addr_1rs;
    limit_req zone=auth_20rs;
    limit_req_status 429;
    # Use request limiting
    limit_conn ip_addr 10;
    # Bandwidth limiting
    limit_rate_after 500k;
    limit_rate 20k;
    # Block large body(1m by default)
    client_max_body_size 16k;
    
    #######
    # TLS #
    #######
    ssl_certificate      /etc/ssl/certs/api.example.com.crt;
    ssl_certificate_key  /etc/ssl/private/api.example.com.key;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  5m;
    ssl_ciphers          HIGH:!aNULL:!MD5;
    ssl_protocols        TLSv1.2 TLSv1.3;

    ################
    # Base headers #
    ################
    # proxy_redirect off;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header Application-Name secrets;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    # Helmet
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'";

    #########################
    # Handle OPTIONS method #
    #########################
    if ($request_method = 'OPTIONS') {
        # CORS
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, OPTIONS';
        add_header 'Access-Control-Max-Age'        86400;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain; charset=UTF-8';
        return 204;
    }

    #######
    # API #
    #######
    # Versioning
    rewrite ^/api/((?!v1/).*)$ /api/v1/$1 redirect;  
    # Api Definitions
    include api.conf.d/*.conf; 

    ##################
    # Error handling #
    ##################
    error_page 404 = @400;         # Treat invalid paths as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to client
    include json_errors.conf;      # API client-friendly JSON errors
    default_type application/json; # If no content-type, assume JSON
}