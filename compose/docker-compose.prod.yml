version: '3.9'

# prod env
# 1. use own data & sso services
# 2. use metrics exporters since there is enough load
# 3. use load testing; backup prod data to revert it once testing is done

volumes:
  redis-02_data:
  postgres-02_data:
  mongodb-02_data:
  mongodb-02_config:
  cassandra-02_data:
  clickhouse-02_data:

services:
  # data(backup replication)

  redis-02:
    image: redis/redis-stack-server:latest
    restart: always
    networks: [apps]
    ports: [6389:6379]
    volumes:
      - redis-02_data:/data
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_ARGS="--requirepass \"$REDIS_PASSWORD\" --save 60 100 --loglevel warning"
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    healthcheck:
      test: exit 0
    depends_on:
      - redis

  postgres-02:
    image: bitnami/postgresql:16.2.0-debian-12-r5
    restart: always
    networks: [apps]
    ports: [5442:5432]
    volumes:
      - postgres-02_data:/var/lib/postgresql/data
    environment:
      - POSTGRESQL_USERNAME=${POSTGRES_USER:-test}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD:-test}
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      # readonly replication
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_MASTER_HOST=postgres
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    healthcheck:
      test: exit 0
    depends_on:
      - postgres

  mongo-02:
    image: mongo:7
    restart: always
    networks: [apps]
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports: [27018:27018]
    command:
      [
        '--replSet',
        'rs0',
        '--keyFile',
        '/etc/keyfile',
        '--bind_ip_all',
        '--port',
        '27018',
        '--wiredTigerCacheSizeGB',
        '1.5',
      ]
    volumes:
      - ./keyfile:/etc/keyfile
      - mongodb-02_data:/data/db
      - mongodb-02_config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-test}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-test}
      - MONGO_INITDB_DATABASE=projects
    healthcheck:
      test: exit 0

  cassandra-02:
    image: cassandra:latest
    restart: always
    networks: [apps]
    ports: [9043:9042]
    volumes:
      - cassandra-02_data:/var/lib/cassandra
    environment:
      - CASSANDRA_USER=${CASSANDRA_USER:-test}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD:-test}
      - CASSANDRA_SEEDS=cassandra,cassandra-02
      - CASSANDRA_CLUSTER_NAME=MyTestCluster
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=128
    healthcheck:
      test: exit 0
    depends_on:
      - cassandra

  clickhouse:
    volumes:
      - ./clickhouse/replication/server-01/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse/replication/server-01/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml
    depends_on:
      - clickhouse-keeper-01
      - clickhouse-keeper-02
      - clickhouse-keeper-03

  clickhouse-02:
    image: clickhouse/clickhouse-server:head-alpine
    restart: always
    networks: [apps]
    ports: [127.0.0.1:8123:8123, 127.0.0.1:9000:9000]
    user: '101:101'
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - ./clickhouse/replication/server-02/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse/replication/server-02/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml
      - clickhouse-02_data:/var/lib/clickhouse/
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-test}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-test}
    healthcheck:
      test: exit 0
    depends_on:
      - clickhouse-keeper-01
      - clickhouse-keeper-02
      - clickhouse-keeper-03

  clickhouse-keeper:
    image: clickhouse/clickhouse-keeper:latest-alpine
    restart: always
    networks: [apps]
    ports: [127.0.0.1:9181:9181]
    user: '101:101'
    volumes:
      - ./clickhouse/replication/keeper-01/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml
    healthcheck:
      test: exit 0

  clickhouse-keeper-02:
    image: clickhouse/clickhouse-keeper:latest-alpine
    restart: always
    networks: [apps]
    ports: [127.0.0.1:9181:9181]
    user: '101:101'
    volumes:
      - ./clickhouse/replication/keeper-02/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml
    healthcheck:
      test: exit 0

  clickhouse-keeper-03:
    image: clickhouse/clickhouse-keeper:latest-alpine
    restart: always
    networks: [apps]
    ports: [127.0.0.1:9181:9181]
    user: '101:101'
    volumes:
      - ./clickhouse/replication/keeper-03/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml
    healthcheck:
      test: exit 0

  # monitoring

  fluent-bit:
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  docker-metrics-exporter:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    networks: [monitoring]
    ports: [8081:8081]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: exit 0
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  node-metrics-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    networks: [monitoring]
    ports: [9100]
    command:
      - 'â€”-path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    healthcheck:
      test: exit 0
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  redis-metrics-exporter:
    # we use this since only redis enterprise has native prometheus support
    image: oliver006/redis_exporter
    restart: unless-stopped
    networks: [monitoring]
    ports: [9121]
    environment:
      - REDIS_ADDR=${REDIS_HOST:-redis}/0:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    depends_on:
      - redis
    healthcheck:
      test: exit 0
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  postgres-metrics-exporter:
    image: bitnami/postgres-exporter:latest
    restart: unless-stopped
    networks: [monitoring]
    ports: [9187]
    environment:
      - DATA_SOURCE_NAME=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@{POSTGRES_HOST:-postgres}:5432/postgres?sslmode=disable
    depends_on:
      - postgres
    healthcheck:
      test: exit 0
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  mongo-metrics-exporter:
    image: bitnami/mongodb-exporter:0.11.0-debian-10-r75
    restart: unless-stopped
    networks: [monitoring]
    ports: [9216:9216]
    environment:
      - MONGODB_URI=mongodb://${MONGO_USER:-test}:${MONGO_PASSWORD:-test}@${MONGO_HOST:-mongo}:27017/?replicaSet=rs0
    depends_on:
      - mongodb
    healthcheck:
      test: exit 0
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  # apps

  workspace-svc:
    image: taskapp/workspace-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  notification-svc:
    image: taskapp/notification-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  search-svc:
    image: taskapp/search-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  report-svc:
    image: taskapp/report-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  project-command-svc:
    image: taskapp/project-command-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  project-query-svc:
    image: taskapp/project-query-svc:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1

  gateway:
    image: taskapp/gateway:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1
