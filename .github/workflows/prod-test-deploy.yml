name: "run tests & deploy to prod"

on:
  pull_request:
    types: [closed]
    branches: [main]

concurrency:
  group: ci-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prod-deploy:
    runs-on: ubuntu-latest
    environment: prod # uses secrets from prod environment
    permissions:
      pull-requests: read
    outputs:
      VERSION: ${{ steps.variables.outputs.VERSION }}
    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU # multiarch
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract release version from branch name
        if: contains(toJSON(github.head_ref), 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Extract hotfix version from branch name
        if: contains(toJSON(github.head_ref), 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 2. Build and push only updated services for monorepo
      - name: Add path filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workspace-svc:
              - 'apps/workspace-svc/**'
            issue-command-svc:
              - 'apps/issue-command-svc/**'
            issue-query-svc:
              - 'apps/issue-query-svc/**'
            notification-svc:
              - 'apps/notification-svc/**'
            search-svc:
              - 'apps/search-svc/**'
            report-svc:
              - 'apps/report-svc/**'
            gateway:
              - 'apps/gateway/**'
      - name: Build and push workspace-svc
        if: steps.filter.outputs.workspace-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "workspace-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push issue-command-svc
        if: steps.filter.outputs.issue-command-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-command-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      - name: Build and push issue-query-svc
        if: steps.filter.outputs.issue-query-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-query-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      - name: Build and push notification-svc
        if: steps.filter.outputs.notification-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-query-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push search-svc
        if: steps.filter.outputs.search-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "search-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push report-svc
        if: steps.filter.outputs.report-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "report-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push gateway
        if: steps.filter.outputs.gateway == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "gateway"
        with:
          push: true
          context: ./apps/gateway
          file: ./apps/gateway/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest

      # 3. Deploy(pull)
      - name: Deploy
        run: echo "daily pull deployment"

      # 4. Notify
      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: app-alerts
          status: SUCCESS
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: app-alerts
          status: FAILED
          color: danger

  prod-create-release:
    needs: [prod-deploy]
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Create release
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.VERSION }}
          git tag -a $RELEASE_VERSION -m "release: $RELEASE_VERSION"
          git push origin $RELEASE_VERSION
          gh release create $RELEASE_VERSION --title "$RELEASE_VERSION" --generate-notes

  prod-create-pull-request:
    needs: [prod-deploy]
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # 2. Create PR to dev for hotfix
      - name: Open PR to merge main into dev branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.VERSION }}
          BRANCH_NAME="merge/$RELEASE_VERSION"
          git checkout -b $BRANCH_NAME
          git merge origin/main
          git commit --allow-empty -am "Merge main into dev"
          git push origin "$BRANCH_NAME"
          gh pr create --base develop --head "$BRANCH_NAME" --title "Merge - $RELEASE_VERSION" --fill
