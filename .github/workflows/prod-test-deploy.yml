name: "run tests & deploy to prod"

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        default: latest
        description: Tag you want to release.
        required: true

concurrency:
  group: ci-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # prod-test:
  #   runs-on: ubuntu-latest
  #   if: | # only PR for release/hotfix is allowed and PR is closed with merging
  #     (contains(toJSON(github.head_ref), 'release/')
  #     || contains(toJSON(github.head_ref), 'hotfix/'))
  #     && github.event.pull_request.merged == true
  #   steps:
  #     # 1. Setup
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "20"
  #     - name: Install newman
  #       run: npm install -g newman

  #     # 2. Run Tests
  #     - name: Run Unit & Integration Tests
  #       run: mv .env.example .env; npm run install; npm run build; npm run lint; npm run test:jest;
  #     - name: Run E2E Tests
  #       run: npm run test:e2e;
  #       # run: newman run NewmanDemo.postman_collection.json -e ReqResDev.postman_environment.json

  prod-deploy:
    # needs: [prod-test]
    runs-on: ubuntu-latest
    environment: prod # uses secrets from prod environment
    env:
      IMAGE_TAG: "${{ github.event.release.tag_name }}"
    permissions:
      pull-requests: read
    outputs:
      RELEASE_VERSION: ${{ steps.variables.outputs.RELEASE_VERSION }}
    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU # multiarch
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # # 2. Sets & print variables
      # - name: Sets variables
      #   id: variables     
      #   run: |
      #     git fetch --prune --prune-tags origin

      #     # 1. Get tags
      #     LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
      #     TAG_LIST=($(echo $LATEST_TAG | tr '.' ' '))
      #     [[ "${#TAG_LIST[@]}" -ne 2 ]] && echo "$RELEASE_VERSION is not a valid version" && exit 1

      #     # 2. Set release version
      #     if [[ "$GITHUB_HEAD_REF" == release* ]]
      #     then
      #      RELEASE_VERSION=$(( TAG_LIST[0] + 1 )).0;
      #     else
      #      RELEASE_VERSION=${TAG_LIST[0]}.$(( TAG_LIST[1] + 1));
      #     fi

      #     # 3. Set vars
      #     IMAGE_REGISTRY="us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/cloud-diplomats/${{ env.IMAGE_NAME }}"
      #     IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)

      #     # 4. Set vars as envs & ouputs
      #     echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV
      #     echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      #     echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      #     echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      # 2. Build and push only updated services for monorepo
      - name: Add path filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workspace-svc:
              - 'apps/workspace-svc/**'
            issue-command-svc:
              - 'apps/issue-command-svc/**'
            issue-query-svc:
              - 'apps/issue-query-svc/**'
            notification-svc:
              - 'apps/notification-svc/**'
            search-svc:
              - 'apps/search-svc/**'
            report-svc:
              - 'apps/report-svc/**'
            gateway:
              - 'apps/gateway/**'
      - name: Build and push workspace-svc
        if: steps.filter.outputs.workspace-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "workspace-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push issue-command-svc
        if: steps.filter.outputs.issue-command-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-command-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      - name: Build and push issue-query-svc
        if: steps.filter.outputs.issue-query-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-query-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      - name: Build and push notification-svc
        if: steps.filter.outputs.notification-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "issue-query-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push search-svc
        if: steps.filter.outputs.search-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "search-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push report-svc
        if: steps.filter.outputs.report-svc == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "report-svc"
        with:
          push: true
          build-args: |
            SERVICE_NAME=$SERVICE_NAME
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest
      - name: Build and push gateway
        if: steps.filter.outputs.gateway == 'true'
        uses: docker/build-push-action@v4
        env:
          SERVICE_NAME: "gateway"
        with:
          push: true
          context: ./apps/gateway
          file: ./apps/gateway/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
            ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE_NAME:latest

      # 3. Deploy
      - name: Deploy
        run: echo "daily pull deployment"

      # 4. Notify
      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: app-alerts
          status: SUCCESS
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: app-alerts
          status: FAILED
          color: danger

  prod-create-release:
    needs: [prod-deploy]
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      # 2. Create release
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
          git tag -a $RELEASE_VERSION -m "release: $RELEASE_VERSION"
          git push origin $RELEASE_VERSION
          gh release create $RELEASE_VERSION --title "$RELEASE_VERSION" --generate-notes

  prod-create-pull-request: # merge main into develop for hotfix
    needs: [prod-deploy]
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      # 2. Create PR
      - name: Open PR to align develop with main
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
          BRANCH_NAME="merge/$RELEASE_VERSION"
          git checkout -b $BRANCH_NAME

          git merge origin/main
          git commit --allow-empty -am "Merge main into develop"
          git push origin "$BRANCH_NAME"

          gh pr create --base develop --head "$BRANCH_NAME" --title "Merge - $RELEASE_VERSION" --fill
