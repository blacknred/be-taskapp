version: "3.8"

networks:
  infrastructure:
    name: main

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}
  elasticsearch_data: {}

services:

  mc:
    image: minio/mc:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_USER:-test} ${MINIO_PASSWORD:-test}; /usr/bin/mc rm -r --force myminio/loki; /usr/bin/mc mb myminio/loki; /usr/bin/mc policy set public myminio/loki; exit 0; "
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-test}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-test}
    depends_on:
      - minio

  jaeger:
    image: jaegertracing/all-in-one:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778
      - 16686
      - 14268
      - 14250
      - 9411
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 8081:8080 ]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  node-exporter:
    image: prom/node-exporter:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9100 ]
    command:
      - "â€”-path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:edge
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9113 ]
    environment:
      - nginx.scrape-uri=nginx:80/metrics
    depends_on:
      - nginx

  postgres-exporter:
    image: bitnami/postgres-exporter:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9187 ]
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@db:5432/${POSTGRES_DB:-test}?sslmode=disable
    depends_on:
      - postgres

  redis-exporter:
    # we use this since only redis enterprice has native prometheus supporting
    image: oliver006/redis_exporter
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9121 ]
    environment:
      - REDIS_ADDR=redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9090 ]
    command:
      - "--config.file=/etc/prometheus/config.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=7d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - prometeus_data:/prometheus
      - ./monitoring/prometheus/config.yml:/etc/prometheus/config.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    depends_on:
      - node-exporter
      - cadvisor
      - nginx-exporter
      - postgres-exporter
      - redis-exporter
      - rabbitmq-exporter
      - minio

  loki:
    image: grafana/loki:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 3100 ]
    user: root
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/config.yaml:ro
      - ./monitoring/loki/alerts.yml:/etc/loki/rules/alerts/rules.yml:ro
    environment:
      # the dot in the S3 address for MinIO is used because there is no need to specify AWS Region
      - MINIO_URL=http://${MINIO_USER:-test}:${MINIO_PASSWORD:-test}@minio.:9000/loki
    depends_on:
      - minio

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 24224, 24224:24224/udp ]
    volumes:
      - ./monitoring/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 3003:3000 ]
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER={GRAFANA_USER:-test}
      - GF_SECURITY_ADMIN_PASSWORD={GRAFANA_PASSWORD:-test}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
      - jaeger
      - loki

  alertmanager:
    image: prom/alertmanager:latest
    env_file: ./.env.dev
    restart: unless-stopped
    networks: [ infrastructure ]
    ports: [ 9093 ]
    command:
      - "--storage.path=/alertmanager"
      - "--config.file=/etc/alertmanager/config.yml"
    volumes:
      - alertmanager_data:/alertmanager
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - ./monitoring/alertmanager/notifications.tmpl:/etc/alertmanager/notifications.tmpl:ro
    depends_on:
      - prometheus
  # elasticsearch:
  #   build: ./monitoring/elk/elasticsearch
  #   env_file: ./.env.dev
  #   restart: always
  #   networks: [infrastructure]
  #   ports: [9200, 9300]
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data"
  #     - ./monitoring/elk/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
  #   environment:
  #     - node.name=node01
  #     - ES_JAVA_OPTS="-Xmx512m -Xms512m"
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-test}
  #     - discovery.type=single-node
  #     - xpack.license.self_generated.type=basic
  #     - xpack.security.enabled=false

  # logstash:
  #   build: ./monitoring/elk/logstash
  #   env_file: ./.env.dev
  #   restart: always
  #   networks: [infrastructure]
  #   ports:
  #     - 5000:5000/tcp
  #     - 5044:5044/tcp
  #     - 5000:5000/udp
  #     - 9600
  #   volumes:
  #     - ./monitoring/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
  #     - ./monitoring/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
  #   environment:
  #     LS_JAVA_OPTS=-Xmx256m -Xms256m
  #   depends_on:
  #     - elasticsearch


  #   kibana:
  #     image: docker.elastic.co/kibana/kibana:8.3.3
  #     restart: always
  #     networks: [infrastructure]
  #     ports: [5601:5601]
  #     environment:
  #       ELASTICSEARCH_HOSTS: http://node01:9200
  #     depends_on:
  #       - elasticsearch



  # kibana:
  #   hostname: kibana
  #   build:
  #     context: kibana/
  #     args:
  #       ELK_VERSION: $ELK_VERSION
  #   volumes:
  #     - type: bind
  #       source: ./kibana/config/kibana.yml
  #       target: /usr/share/kibana/config/kibana.yml
  #       read_only: true
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - elk
  #   depends_on:
  #     - elasticsearch

  # filebeat:
  #   image: docker-logs-elk/filebeat:1.0.0
  #   build:
  #     context: filebeat/
  #     args:
  #       ELK_VERSION: $ELK_VERSION
  #   volumes:
  #     # needed to access all docker logs (read only) :
  #     - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
  #     # needed to access additional informations about containers
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   depends_on:
  #     - elasticsearch
  #     - logstash
  #   networks:
  #     - elk

