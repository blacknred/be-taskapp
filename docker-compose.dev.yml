version: "3.7"

services:
  redis:
    container_name: redis
    build: ./redis
    env_file: ./.env.dev
    volumes:
      - "./redis/db-data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: exit 0

  queue:
    container_name: queue
    build: ./queue
    env_file: ./.env.dev
    volumes:
      - "./queue/db-data:/var/lib/rabbitmq"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-test}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-test}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: exit 0

  user-db:
    container_name: user-db
    build: ./user-db
    env_file: ./.env.dev
    volumes:
      - "./user-db/db-data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DB=${POSTGRES_DB:-users_test}
    restart: always
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: exit 0

  task-db:
    container_name: task-db
    build: ./task-db
    env_file: ./.env.dev
    volumes:
      - "./task-db/db-data:/data/db"
      - "./task-db/init:/docker-entrypoint-initdb.d/"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-root}
      - MONGO_INITDB_DATABASE=${MONGO_DB:-tasks_test}
      - MONGO_USERNAME=${MONGO_USERNAME:-test}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-test}
    restart: always
    ports:
      - "27017:27017"
    networks:
      - backend
    healthcheck:
      test: exit 0

  user-service:
    container_name: user-service
    hostname: user-service
    command: yarn start:dev
    build:
      context: ./user-service
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./user-service:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
      - DB_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@user-db:5432/${POSTGRES_DB:-users_test}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
    ports:
      - "3001:3000"
    networks:
      - backend
    depends_on:
      - user-db
      - redis
    links:
      - user-db
      - redis

  task-service:
    container_name: task-service
    hostname: task-service
    command: yarn start:dev
    build:
      context: ./task-service
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./task-service:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
      - DB_URL=mongo://${MONGO_USERNAME:-test}:${MONGO_PASSWORD:-test}@task-db:27017/${MONGO_DB:-tasks_test}
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@queue:5672
    ports:
      - "3002:3000"
    depends_on:
      - task-db
      - queue
      - worker-service
    links:
      - task-db
      - queue
      - worker-service

  worker-service:
    container_name: worker-service
    hostname: worker-service
    command: yarn start:dev
    build:
      context: ./worker-service
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./worker-service:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
      - WORKERS_QNT=${WORKERS_QNT:-5}
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@queue:5672
    depends_on:
      - queue
    links:
      - queue

  gateway:
    container_name: gateway
    hostname: gateway
    command: yarn start:debug
    build:
      context: ./gateway
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./gateway:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
    depends_on:
      - user-service
      - task-service
    links:
      - user-service
      - task-service
    restart: always
    ports:
      - "8080:3000"
      - "9229:9229"
    networks:
      - backend
      - frontend

  web:
    container_name: web
    hostname: web
    build:
      context: ./web
      target: development
    volumes:
      - ./web:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - "3000:3000"
    environment:
      - API_HOST=localhost:8080
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
