version: "3.7"

services:
  redis:
    container_name: redis
    build: ./redis
    env_file: ./.env.dev
    volumes:
      - "./redis/db-data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: exit 0

  rabbitmq:
    container_name: rabbitmq
    build: ./rabbitmq
    env_file: ./.env.dev
    volumes:
      - "./rabbitmq/db-data:/var/lib/rabbitmq"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-test}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-test}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: exit 0

  user-db:
    container_name: user-db
    build: ./user-db
    env_file: ./.env.dev
    volumes:
      - "./user-db/db-data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DB=${POSTGRES_DB:-users_test}
    restart: always
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: exit 0

  task-db:
    container_name: task-db
    build: ./task-db
    env_file: ./.env.dev
    volumes:
      - "./task-db/db-data:/data/db"
      - "./task-db/init:/docker-entrypoint-initdb.d/"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-root}
      - MONGO_INITDB_DATABASE=${MONGO_DB:-tasks_test}
      - MONGO_USERNAME=${MONGO_USERNAME:-test}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-test}
    restart: always
    ports:
      - "27017:27017"
    networks:
      - backend
    healthcheck:
      test: exit 0

  user-service:
    container_name: user-service
    hostname: user-service
    build:
      context: ./user-service
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./user-service:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
      - DATABASE_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@user-db:5432/${POSTGRES_DB:-users_test}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
    ports:
      - "4001:3000"
    command: yarn start:dev
    networks:
      - backend
    depends_on:
      - user-db
      - redis
    links:
      - user-db
      - redis

  task-service:
    container_name: task-service
    hostname: task-service
    build:
      context: ./task-service
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./task-service:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
      - DATABASE_URL=mongo://${MONGO_USERNAME:-test}:${MONGO_PASSWORD:-test}@task-db:27017/${MONGO_DB:-tasks_test}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@localhost:5672
    ports:
      - "4002:3000"
    command: yarn start:dev
    depends_on:
      - task-db
      - rabbitmq
    links:
      - task-db
      - rabbitmq

  # mail-service:
  #   container_name: mail-service
  #   hostname: mail-service
  #   build: ./mail-service
  #   env_file: ./.env.dev
  #   volumes:
  #     - "./mail-service:/usr/src/app"
  #     - "./mail-service/package.json:/usr/src/package.json"
  #   environment:
  #     - NODE_ENV=development
  #     - SECRET=${SECRET}
  #     - SMTP_URL=${SMTP_URL:-smtp://test@test:587/?pool=true}
  #   ports:
  #     - "4003:3000"
  #   depends_on:
  #     - rabbitmq
  #   links:
  #     - rabbitmq

  # auth-service:
  #   container_name: auth-service
  #   hostname: auth-service
  #   build: ./auth-service
  #   env_file: ./.env.dev
  #   volumes:
  #     - "./auth-service:/usr/src/app"
  #     - "./auth-service/package.json:/usr/src/package.json"
  #   environment:
  #     - NODE_ENV=development
  #     - SECRET=${SECRET}
  #   ports:
  #     - "4004:3000"
  #   depends_on:
  #     - redis
  #     - user-service
  #   links:
  #     - redis
  #     - user-service

  gateway:
    container_name: gateway
    hostname: gateway
    build:
      context: ./gateway
      target: development
    env_file:
      - ".env.dev"
    volumes:
      - "./gateway:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_ENV=development
      - SECRET=${SECRET}
    command: yarn start:debug
    depends_on:
      - user-service
      - task-service
      # - auth-service
    links:
      - user-service
      - task-service
    restart: always
    ports:
      - "4000:3000"
      - "9229:9229"
    networks:
      - backend
      - frontend

  web:
    container_name: web
    hostname: web
    build:
      context: ./web
      target: development
    volumes:
      - ./web:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - "3000:3000"
    environment:
      - GATEWAY_HOST=localhost:4000
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
