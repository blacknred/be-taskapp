version: "3.7"

services:
  rabbitmq:
    container_name: rabbitmq
    build: ./rabbitmq
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./rabbitmq/data:/var/lib/rabbitmq"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-test}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-test}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: exit 0

  redis:
    container_name: redis
    build: ./redis
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./redis/data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: exit 0

  user-db:
    container_name: user-db
    build: ./user-db
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./user-db/data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DB=${POSTGRES_DB:-users_test}
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: exit 0

  workspace-db:
    container_name: workspace-db
    build: ./workspace-db
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./workspace-db/data:/data/db"
    environment:
      - AUTH=yes
      - MONGO_USER=${MONGO_USER:-test}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-test}
      - MONGO_DB=${MONGO_DB:-workspaces_test}
    ports:
      - "27017:27017"
    networks:
      - backend
    healthcheck:
      test: exit 0

  # auth-service:
  #   container_name: auth-service
  #   hostname: auth-service
  #   command: yarn start:dev
  #   env_file: ./.env.dev
  #   restart: on-failure
  #   networks: backend
  #   build:
  #     context: ./auth-service
  #     target: build
  #   volumes:
  #     - "./auth-service:/usr/src/app"
  #     - "/usr/src/app/node_modules"
  #     - "/usr/src/app/dist"
  #   environment:
  #     - NODE_ENV=development
  #     - CACHE_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
  #   ports:
  #     - "8081:3000"
  #   depends_on:
  #     - redis
  #     - user-service

  user-service:
    container_name: user-service
    hostname: user-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./user-service
      target: build
    volumes:
      - "./user-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - CACHE_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/2
      - DB_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@user-db:5432/${POSTGRES_DB:-users_test}
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    ports:
      - "8082:3000"
    networks:
      - backend
    depends_on:
      - user-db
      - redis

  workspace-service:
    container_name: workspace-service
    hostname: workspace-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./workspace-service
      target: build
    volumes:
      - "./workspace-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - DB_URL=mongodb://${MONGO_USER:-test}:${MONGO_PASSWORD:-test}@workspace-db:27017/${MONGO_DB:-workspaces_test}
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    ports:
      - "8083:3000"
    networks:
      - backend
    depends_on:
      - workspace-db

  worker-service:
    container_name: worker-service
    hostname: worker-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./worker-service
      target: build
    volumes:
      - "./worker-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - WORKERS_QNT=${WORKERS_QNT:-5}
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    ports:
      - "8084:3000"
    networks:
      - backend
    depends_on:
      - rabbitmq

  notification-service:
    container_name: notification-service
    hostname: notification-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./notification-service
      target: build
    volumes:
      - "./notification-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - CACHE_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/1
      - QUEUE_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    ports:
      - "8085:3000"
    networks:
      - backend
    depends_on:
      - redis
      - rabbitmq

  gateway:
    container_name: gateway
    hostname: gateway
    command: [sh, -c, "yarn run docs && yarn start:debug"]
    env_file: ./.env.dev
    restart: always
    build:
      context: ./gateway
      target: build
    volumes:
      - "./gateway:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - CACHE_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
      - CLIENT_ORIGIN=${CLIENT_ORIGIN:-http://localhost:3000}
    ports:
      - "8080:3000"
      - "8088:3001"
    networks:
      - backend
      - frontend
    depends_on:
      - user-service
      - workspace-service
      # - auth-service
      - redis

  web:
    container_name: web
    hostname: web
    command: yarn dev
    env_file: ./.env.dev
    restart: unless-stopped
    build:
      context: ./web
      target: build
    volumes:
      - "./web:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/.next"
    environment:
      - API_HOST=${API_ORIGIN:-http://localhost:8080}
      - NODE_OPTIONS=--openssl-legacy-provider
    ports:
      - "3000:3000"
    networks:
      - frontend

  prometheus:
    container_name: prometheus
    hostname: prometheus
    build: ./prometheus
    env_file: ./.env.dev
    restart: unless-stopped
    volumes:
      - "./prometheus/data:/prometheus"
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    ports:
      - "3001:9090"
    networks:
      - frontend

  grafana:
    container_name: grafana
    hostname: grafana
    build: ./grafana
    env_file: ./.env.dev
    restart: unless-stopped
    volumes:
      - "./grafana/data:/var/lib/grafana"
      - "./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
    ports:
      - "3002:3000"
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
