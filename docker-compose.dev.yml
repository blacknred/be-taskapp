version: "3.7"

services:
  
  # data

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    build: ./rabbitmq
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./rabbitmq/data:/var/lib/rabbitmq"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-test}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-test}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: exit 0

  redis:
    container_name: redis
    hostname: redis
    build: ./redis
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./redis/data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-test}
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: exit 0

  postgres:
    container_name: postgres
    hostname: postgres
    build: ./postgres
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./postgres/data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DB=${POSTGRES_DB:-test}
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: exit 0

  # infrastructure

  prometheus:
    container_name: prometheus
    hostname: prometheus
    build: ./prometheus
    env_file: ./.env.dev
    restart: unless-stopped
    volumes:
      - "./prometheus/data:/prometheus"
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    ports:
      - "9090:9090"
    networks:
      - backend
    healthcheck:
      test: exit 0

  node-exporter:
    container_name: node-exporter
    hostname: node-exporter
    image: prom/node-exporter:latest
    env_file: ./.env.dev
    restart: unless-stopped
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - "â€”-path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - backend

  nginx-exporter:
    container_name: nginx-exporter
    hostname: nginx-exporter
    image: nginx/nginx-prometheus-exporter:edge
    env_file: ./.env.dev
    restart: unless-stopped
    environment:
      - nginx.scrape-uri=nginx:8080/metrics
    ports:
      - "9113:9113"
    networks:
      - backend

  grafana:
    container_name: grafana
    hostname: grafana
    build: ./grafana
    env_file: ./.env.dev
    restart: unless-stopped
    volumes:
      - "./grafana/data:/var/lib/grafana"
      - "./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
    ports:
      - "4000:3000"
    networks:
      - backend

  jaeger:
    container_name: jaeger
    hostname: jaegertracing
    image: jaegertracing/all-in-one:latest
    env_file: ./.env.dev
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # ui
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - backend


# node01:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
#     container_name: node01
#     restart: always
#     environment:
#       - node.name=node01
#       - cluster.name=es-cluster-8
#       - discovery.type=single-node
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#       - xpack.license.self_generated.type=basic
#       - xpack.security.enabled=false
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     volumes:
#       - ./es-data01:/usr/share/elasticsearch/data
#     ports:
#       - "9200:9200"
#       - "9300:9300"
#     networks: [ "microservices" ]

#   kibana:
#     image: docker.elastic.co/kibana/kibana:8.3.3
#     restart: always
#     environment:
#       ELASTICSEARCH_HOSTS: http://node01:9200
#     ports:
#       - "5601:5601"
#     depends_on:
#       - node01
#     networks: [ "microservices" ]


  # apps

  user-service:
    container_name: user-service
    hostname: user-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./user-service
      target: build
    volumes:
      - "./user-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@db:5432/${POSTGRES_DB:-test}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "8010:3000"
    networks:
      - backend

  auth-service:
    container_name: auth-service
    hostname: auth-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./auth-service
      target: build
    volumes:
      - "./auth-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/0
    depends_on:
      - redis
      - user-service
    ports:
      - "8020:3000"
    networks:
      - backend

  workspace-service:
    container_name: workspace-service
    hostname: workspace-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./workspace-service
      target: build
    volumes:
      - "./workspace-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@db:5432/${POSTGRES_DB:-test}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "8030:3000"
    networks:
      - backend

  billing-service:
    container_name: billing-service
    hostname: billing-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./billing-service
      target: build
    volumes:
      - "./billing-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@db:5432/${POSTGRES_DB:-test}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "8040:3000"
    networks:
      - backend

  notification-service:
    container_name: notification-service
    hostname: notification-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./notification-service
      target: build
    volumes:
      - "./notification-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://:${REDIS_PASSWORD:-test}@redis:6379/1
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - redis
      - rabbitmq
    ports:
      - "8050:3000"
    networks:
      - backend

  workerbot-service:
    container_name: workerbot-service
    hostname: workerbot-service
    command: yarn start:dev
    env_file: ./.env.dev
    restart: on-failure
    build:
      context: ./workerbot-service
      target: build
    volumes:
      - "./workerbot-service:/usr/src/app"
      - "/usr/src/app/node_modules"
      - "/usr/src/app/dist"
    environment:
      - NODE_ENV=development
      - WORKERS_QNT=${WORKERS_QNT:-5}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-test}:${RABBITMQ_PASSWORD:-test}@rabbitmq:5672
    depends_on:
      - rabbitmq
    ports:
      - "8060:3000"
    networks:
      - backend

  nginx:
    container_name: nginx
    hostname: nginx
    build: ./nginx
    env_file: ./.env.dev
    restart: always
    volumes:
      - "./nginx/etc/nginx/nginx.conf:/etc/nginx:ro"

      - "./nginx/swagger-ui:/var/www/swagger-ui:ro"
      - "./packages/services/web/dist:/usr/share/nginx/html"

      - "./nginx.conf:/etc/nginx/nginx.conf"
      - ./jaeger-config.json:/etc/jaeger-config.json
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/conf.d
      - NGINX_HOST=${RABBITMQ_PASSWORD:-localhost}
    depends_on:
      - user-service
      - auth-service
      - workspace-service
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
      - frontend

  web:
    container_name: web
    hostname: web
    command: yarn dev
    env_file: ./.env.dev
    restart: unless-stopped
    build:
      context: ./web
      target: build
    volumes:
      - "./web:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
      - SKIP_PREFLIGHT_CHECK=true
      - CHOKIDAR_USEPOLLING=true
      # - NEXT_PUBLIC_BE_ORIGIN=${BE_ORIGIN:-http://localhost:8080}
    ports:
      - "3000:3000"
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
